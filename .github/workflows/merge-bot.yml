# yamllint disable rule:document-start rule:line-length
name: Merge Bot

# yamllint disable-line rule:truthy
on:
  pull_request:
    types:
      - labeled
      - ready_for_review
      - review_request_removed
      - review_requested
      - synchronize
      - unlabeled
  pull_request_review:
    types:
      - dismissed
      - submitted

jobs:

  merge:
    if: github.event.review.state == 'approved' && github.triggering_actor != 'chickenandpork'
    permissions:  # let's trim these after it's working
      contents: write  # required for POST /repos/{owner}/{repo}/merges
    runs-on: ubuntu-latest
    name: Merge on Accepted PR
    steps:
      - name: Merge-bot Workflow
        uses: squalrus/merge-bot@v0.4.5
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          blocking_labels: do not merge, invalid
          labels: automerge
          method: merge
          checks_enabled: true
          # deletion in settings: "Pull Requests" section, "[x] Automatically delete head branches"
          delete_source_branch: false


  allanc-merge:
    if: github.triggering_actor == 'chickenandpork'
    permissions:  # let's trim these after it's working
      contents: write  # required for POST /repos/{owner}/{repo}/merges
    runs-on: ubuntu-latest
    name: Merge on Accepted/Allanc PR
    steps:
      - name: Merge-bot Workflow
        uses: squalrus/merge-bot@v0.4.5
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          blocking_labels: do not merge, invalid
          reviewers: false
          labels: automerge
          method: merge
          checks_enabled: false
          # deletion in settings: "Pull Requests" section, "[x] Automatically delete head branches"
          delete_source_branch: false

  other:
    #if: github.event.review.state != 'approved' && github.triggering_actor != 'chickenandpork'
    runs-on: ubuntu-latest
    name: No Merge so dump stats
    steps:
      - name: Dump GitHub context
        env:
          GITHUB_CONTEXT: ${{ toJson(github) }}
        run: echo "$GITHUB_CONTEXT"
      - name: Dump job context
        env:
          JOB_CONTEXT: ${{ toJson(job) }}
        run: echo "$JOB_CONTEXT"
      - name: Dump steps context
        env:
          STEPS_CONTEXT: ${{ toJson(steps) }}
        run: echo "$STEPS_CONTEXT"
      - name: Dump runner context
        env:
          RUNNER_CONTEXT: ${{ toJson(runner) }}
        run: echo "$RUNNER_CONTEXT"
      - name: Dump strategy context
        env:
          STRATEGY_CONTEXT: ${{ toJson(strategy) }}
        run: echo "$STRATEGY_CONTEXT"
      - name: Dump matrix context
        env:
          MATRIX_CONTEXT: ${{ toJson(matrix) }}
        run: echo "$MATRIX_CONTEXT"
